{"ast":null,"code":"var _jsxFileName = \"/Users/jyotisingh/Desktop/akkshatt/untitled folder/app/video-clipper/src/YouTubeUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst YouTubeUpload = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [clips, setClips] = useState([]);\n  const [selectedClips, setSelectedClips] = useState([]);\n  const [uploadResults, setUploadResults] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check authentication status on component mount\n  useEffect(() => {\n    checkAuthStatus();\n    loadClips();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/auth/youtube/status`);\n      const data = await response.json();\n      setIsAuthenticated(data.authenticated);\n    } catch (error) {\n      console.error('Failed to check auth status:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadClips = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/clips-list`);\n      const data = await response.json();\n      setClips(data.clips.map(clip => ({\n        filename: clip.filename,\n        title: clip.filename.replace('.mp4', '').replace('VIRAL_', '').replace(/_/g, ' '),\n        description: `Viral clip generated from your content`,\n        isViral: clip.isViral\n      })));\n    } catch (error) {\n      console.error('Failed to load clips:', error);\n    }\n  };\n  const getAuthUrl = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/auth/youtube/url`);\n      const data = await response.json();\n      if (data.success) {\n        window.open(data.authUrl, '_blank');\n      }\n    } catch (error) {\n      console.error('Failed to get auth URL:', error);\n    }\n  };\n  const handleClipSelection = filename => {\n    setSelectedClips(prev => prev.includes(filename) ? prev.filter(f => f !== filename) : [...prev, filename]);\n  };\n  const uploadSelectedClips = async () => {\n    if (selectedClips.length === 0) {\n      alert('Please select at least one clip to upload');\n      return;\n    }\n    setIsUploading(true);\n    setUploadResults([]);\n    try {\n      const results = [];\n      for (const clipFilename of selectedClips) {\n        const clip = clips.find(c => c.filename === clipFilename);\n        const title = (clip === null || clip === void 0 ? void 0 : clip.title) || `Viral Clip - ${clipFilename}`;\n        console.log(`Uploading ${clipFilename} with title: ${title}`);\n        const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n        const response = await fetch(`${API_URL}/upload/youtube-shorts`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            clipFilename,\n            title,\n            description: (clip === null || clip === void 0 ? void 0 : clip.description) || 'Viral content generated with AI',\n            tags: ['viral', 'shorts', 'trending']\n          })\n        });\n        const result = await response.json();\n        results.push(result);\n\n        // Add delay between uploads\n        if (selectedClips.indexOf(clipFilename) < selectedClips.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      }\n      setUploadResults(results);\n      const successful = results.filter(r => r.success);\n      if (successful.length > 0) {\n        alert(`✅ Successfully uploaded ${successful.length} clips to YouTube Shorts!`);\n      }\n    } catch (error) {\n      console.error('Upload failed:', error);\n      alert('❌ Upload failed. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const makeVideoPublic = async videoId => {\n    try {\n      const response = await fetch('http://localhost:5000/upload/youtube/make-public', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoId\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        alert('✅ Video is now public!');\n        // Refresh results\n        setUploadResults(prev => prev.map(r => r.videoId === videoId ? {\n          ...r,\n          privacyStatus: 'public'\n        } : r));\n      } else {\n        alert('❌ Failed to make video public: ' + result.error);\n      }\n    } catch (error) {\n      console.error('Failed to make video public:', error);\n      alert('❌ Failed to make video public');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"youtube-upload-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading YouTube upload system...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"youtube-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"youtube-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDE80 YouTube Shorts Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload your viral clips directly to YouTube Shorts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-section\",\n      children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-prompt\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDD10 YouTube Authentication Required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You need to authenticate with YouTube to upload Shorts.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"auth-button\",\n          onClick: getAuthUrl,\n          children: \"\\uD83D\\uDD17 Connect YouTube Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"auth-note\",\n          children: \"This will open YouTube's authorization page. After authorizing, you'll be redirected back and can start uploading.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-success\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u2705 YouTube Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You're authenticated and ready to upload Shorts!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clip-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCC1 Select Clips to Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clips-grid\",\n        children: clips.map(clip => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `clip-item ${selectedClips.includes(clip.filename) ? 'selected' : ''}`,\n          onClick: () => handleClipSelection(clip.filename),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clip-checkbox\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedClips.includes(clip.filename),\n              onChange: () => handleClipSelection(clip.filename)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"clip-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: clip.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: clip.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this), clip.isViral && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"viral-badge\",\n              children: \"\\uD83D\\uDE80 VIRAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this)]\n        }, clip.filename, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), selectedClips.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-button\",\n          onClick: uploadSelectedClips,\n          disabled: isUploading,\n          children: isUploading ? '📤 Uploading...' : `📤 Upload ${selectedClips.length} Clip${selectedClips.length > 1 ? 's' : ''} to YouTube Shorts`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), uploadResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Upload Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-grid\",\n        children: uploadResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `result-item ${result.success ? 'success' : 'error'}`,\n          children: result.success ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\u2705 Upload Successful\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Title:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 24\n              }, this), \" \", result.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Video ID:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 24\n              }, this), \" \", result.videoId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Status:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 24\n              }, this), \" \", result.privacyStatus]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                href: result.videoUrl,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                className: \"view-button\",\n                children: \"\\uD83D\\uDC41\\uFE0F View Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: result.shortsUrl,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                className: \"shorts-button\",\n                children: \"\\uD83D\\uDCF1 View Shorts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 23\n              }, this), result.privacyStatus === 'private' && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"public-button\",\n                onClick: () => result.videoId && makeVideoPublic(result.videoId),\n                children: \"\\uD83C\\uDF0D Make Public\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\u274C Upload Failed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Error:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 24\n              }, this), \" \", result.error]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(YouTubeUpload, \"opn8/WnsZqrm619INRJGGzDp5Qg=\");\n_c = YouTubeUpload;\nexport default YouTubeUpload;\nvar _c;\n$RefreshReg$(_c, \"YouTubeUpload\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","YouTubeUpload","_s","isAuthenticated","setIsAuthenticated","clips","setClips","selectedClips","setSelectedClips","uploadResults","setUploadResults","isUploading","setIsUploading","loading","setLoading","checkAuthStatus","loadClips","API_URL","process","env","REACT_APP_API_URL","response","fetch","data","json","authenticated","error","console","map","clip","filename","title","replace","description","isViral","getAuthUrl","success","window","open","authUrl","handleClipSelection","prev","includes","filter","f","uploadSelectedClips","length","alert","results","clipFilename","find","c","log","method","headers","body","JSON","stringify","tags","result","push","indexOf","Promise","resolve","setTimeout","successful","r","makeVideoPublic","videoId","privacyStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","checked","onChange","disabled","index","href","videoUrl","target","rel","shortsUrl","_c","$RefreshReg$"],"sources":["/Users/jyotisingh/Desktop/akkshatt/untitled folder/app/video-clipper/src/YouTubeUpload.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface Clip {\n  filename: string;\n  title: string;\n  description: string;\n  isViral?: boolean;\n}\n\ninterface UploadResult {\n  success: boolean;\n  videoId?: string;\n  videoUrl?: string;\n  shortsUrl?: string;\n  title?: string;\n  privacyStatus?: string;\n  error?: string;\n}\n\nconst YouTubeUpload: React.FC = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [clips, setClips] = useState<Clip[]>([]);\n  const [selectedClips, setSelectedClips] = useState<string[]>([]);\n  const [uploadResults, setUploadResults] = useState<UploadResult[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check authentication status on component mount\n  useEffect(() => {\n    checkAuthStatus();\n    loadClips();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/auth/youtube/status`);\n      const data = await response.json();\n      setIsAuthenticated(data.authenticated);\n    } catch (error) {\n      console.error('Failed to check auth status:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadClips = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/clips-list`);\n      const data = await response.json();\n      setClips(data.clips.map((clip: any) => ({\n        filename: clip.filename,\n        title: clip.filename.replace('.mp4', '').replace('VIRAL_', '').replace(/_/g, ' '),\n        description: `Viral clip generated from your content`,\n        isViral: clip.isViral\n      })));\n    } catch (error) {\n      console.error('Failed to load clips:', error);\n    }\n  };\n\n  const getAuthUrl = async () => {\n    try {\n      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n      const response = await fetch(`${API_URL}/auth/youtube/url`);\n      const data = await response.json();\n      if (data.success) {\n        window.open(data.authUrl, '_blank');\n      }\n    } catch (error) {\n      console.error('Failed to get auth URL:', error);\n    }\n  };\n\n  const handleClipSelection = (filename: string) => {\n    setSelectedClips(prev => \n      prev.includes(filename) \n        ? prev.filter(f => f !== filename)\n        : [...prev, filename]\n    );\n  };\n\n  const uploadSelectedClips = async () => {\n    if (selectedClips.length === 0) {\n      alert('Please select at least one clip to upload');\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadResults([]);\n\n    try {\n      const results: UploadResult[] = [];\n\n      for (const clipFilename of selectedClips) {\n        const clip = clips.find(c => c.filename === clipFilename);\n        const title = clip?.title || `Viral Clip - ${clipFilename}`;\n        \n        console.log(`Uploading ${clipFilename} with title: ${title}`);\n\n        const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n        const response = await fetch(`${API_URL}/upload/youtube-shorts`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            clipFilename,\n            title,\n            description: clip?.description || 'Viral content generated with AI',\n            tags: ['viral', 'shorts', 'trending']\n          }),\n        });\n\n        const result = await response.json();\n        results.push(result);\n\n        // Add delay between uploads\n        if (selectedClips.indexOf(clipFilename) < selectedClips.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      }\n\n      setUploadResults(results);\n      \n      const successful = results.filter(r => r.success);\n      if (successful.length > 0) {\n        alert(`✅ Successfully uploaded ${successful.length} clips to YouTube Shorts!`);\n      }\n      \n    } catch (error) {\n      console.error('Upload failed:', error);\n      alert('❌ Upload failed. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const makeVideoPublic = async (videoId: string) => {\n    try {\n      const response = await fetch('http://localhost:5000/upload/youtube/make-public', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ videoId }),\n      });\n\n      const result = await response.json();\n      if (result.success) {\n        alert('✅ Video is now public!');\n        // Refresh results\n        setUploadResults(prev => \n          prev.map(r => \n            r.videoId === videoId \n              ? { ...r, privacyStatus: 'public' }\n              : r\n          )\n        );\n      } else {\n        alert('❌ Failed to make video public: ' + result.error);\n      }\n    } catch (error) {\n      console.error('Failed to make video public:', error);\n      alert('❌ Failed to make video public');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"youtube-upload-container\">\n        <div className=\"loading\">Loading YouTube upload system...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"youtube-upload-container\">\n      <div className=\"youtube-header\">\n        <h2>🚀 YouTube Shorts Upload</h2>\n        <p>Upload your viral clips directly to YouTube Shorts</p>\n      </div>\n\n      {/* Authentication Section */}\n      <div className=\"auth-section\">\n        {!isAuthenticated ? (\n          <div className=\"auth-prompt\">\n            <h3>🔐 YouTube Authentication Required</h3>\n            <p>You need to authenticate with YouTube to upload Shorts.</p>\n            <button \n              className=\"auth-button\"\n              onClick={getAuthUrl}\n            >\n              🔗 Connect YouTube Account\n            </button>\n            <p className=\"auth-note\">\n              This will open YouTube's authorization page. After authorizing, \n              you'll be redirected back and can start uploading.\n            </p>\n          </div>\n        ) : (\n          <div className=\"auth-success\">\n            <h3>✅ YouTube Connected</h3>\n            <p>You're authenticated and ready to upload Shorts!</p>\n          </div>\n        )}\n      </div>\n\n      {/* Clip Selection */}\n      {isAuthenticated && (\n        <div className=\"clip-selection\">\n          <h3>📁 Select Clips to Upload</h3>\n          <div className=\"clips-grid\">\n            {clips.map((clip) => (\n              <div \n                key={clip.filename}\n                className={`clip-item ${selectedClips.includes(clip.filename) ? 'selected' : ''}`}\n                onClick={() => handleClipSelection(clip.filename)}\n              >\n                <div className=\"clip-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedClips.includes(clip.filename)}\n                    onChange={() => handleClipSelection(clip.filename)}\n                  />\n                </div>\n                <div className=\"clip-info\">\n                  <h4>{clip.title}</h4>\n                  <p>{clip.description}</p>\n                  {clip.isViral && <span className=\"viral-badge\">🚀 VIRAL</span>}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {selectedClips.length > 0 && (\n            <div className=\"upload-actions\">\n              <button \n                className=\"upload-button\"\n                onClick={uploadSelectedClips}\n                disabled={isUploading}\n              >\n                {isUploading ? '📤 Uploading...' : `📤 Upload ${selectedClips.length} Clip${selectedClips.length > 1 ? 's' : ''} to YouTube Shorts`}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Upload Results */}\n      {uploadResults.length > 0 && (\n        <div className=\"upload-results\">\n          <h3>📊 Upload Results</h3>\n          <div className=\"results-grid\">\n            {uploadResults.map((result, index) => (\n              <div key={index} className={`result-item ${result.success ? 'success' : 'error'}`}>\n                {result.success ? (\n                  <>\n                    <h4>✅ Upload Successful</h4>\n                    <p><strong>Title:</strong> {result.title}</p>\n                    <p><strong>Video ID:</strong> {result.videoId}</p>\n                    <p><strong>Status:</strong> {result.privacyStatus}</p>\n                    <div className=\"result-actions\">\n                      <a \n                        href={result.videoUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"view-button\"\n                      >\n                        👁️ View Video\n                      </a>\n                      <a \n                        href={result.shortsUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"shorts-button\"\n                      >\n                        📱 View Shorts\n                      </a>\n                      {result.privacyStatus === 'private' && (\n                        <button \n                          className=\"public-button\"\n                          onClick={() => result.videoId && makeVideoPublic(result.videoId)}\n                        >\n                          🌍 Make Public\n                        </button>\n                      )}\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    <h4>❌ Upload Failed</h4>\n                    <p><strong>Error:</strong> {result.error}</p>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n\n    </div>\n  );\n};\n\nexport default YouTubeUpload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}